#                            -*- mode: org; -*-
#
#+TITLE:                         *TODO*
#+AUTHOR: nil
#+OPTIONS: author:nil email:nil ^:{}

* Documentation =Doc=
*** DONE Complete the replacement of =\begin{lstlisting}= for =\lstinputlisting=
    CLOSED: [2014-01-19 Sun 17:35]
    such that all code listings are imported directly from the source files in
    =Src=.  See =chap.tex= for an example of what needs to be done.  Note that
    using the annotation syntax =/// <lable name>= the Makefile generates the
    list of first and last line numbers automatically.  See =Src/main.C= for an
    example.
*** TODO Rename files to correspond to the languages rather than the chapters
    Alternatively combine the language name and the chapter number /e.g./ "chap2_lisp.tex"

* Source code =Src=
*** DONE Complete the conversion of member functions and arguments to =const=
    CLOSED: [2014-01-19 Sun 17:36]
    where appropriate.  Once this is done the =const_cast= statements can be
    removed.
*** TODO Introduce a =namespace=
    /e.g./ =Kamin= or =Budd= or =BuddKamin=.
*** TODO Update =Makefile= adding proper dependency checking.
*** DONE Rename files to correspond to the languages rather than the chapters.
    CLOSED: [2014-01-14 Tue 22:54]
*** DONE Replace use of =char*= with C++ =std::string=
    CLOSED: [2014-01-25 Sat 21:18]
*** DONE Replace C IO functions with C++ =std::iostream= operators.
    CLOSED: [2014-01-25 Sat 21:18]
*** TODO Complete updating Kamin test codes for the Budd versions of the intepreters
*** DONE Use valgrind to test for memory leaks
    CLOSED: [2014-01-25 Sat 21:18]
*** DONE Improve handling for =args= to resolve memory leaks
    CLOSED: [2014-01-25 Sat 21:19]
    To temporarily fix memory leaks in the interpreters originating from the
    =ListNode* args= being created on free-store but not always transferred to a
    reference-counted =List= structure in the environment they are now
    explicitly deleted at the end of function in which it is known they will
    not be needed anymore.  It would be MUCH better if they were created as
    reference-counted list structures in the first place and parsed around and
    automatically deleted if they do out of scope without being held somewhere
    incrementing the count.  i.e.  make full use of RAII in C++.  This is a
    substantial undertaking as currently destructors and RAII are not used and
    would require a lot of change to the reference-counting framework and
    classes.

* Release =GitHub=
*** DONE When the code is updated release on GitHub
    CLOSED: [2014-01-25 Sat 21:19]
